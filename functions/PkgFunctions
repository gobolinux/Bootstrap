#!/bin/sh

TOP_DIR=..
shipped_dir=$TOP_DIR/recipes
source ScriptFunctions

#
# This function relies on the fact that the package is correctly named 
# and stored as a subdirectory inside $(TOPDIR)/packages.
#
# The package's name can be guessed by finding the correct 'config PKG_NAME'
# inside the proper Config.in. Its name is then revealed by reading the 
# directory's name which holds that file.
#
function package_subdir() {
    pkg_dir=`echo $1 | cut -d"=" -f1`
    entry=`find . -name Config.in | xargs grep "config $pkg_dir$"`
    echo $entry | cut -d"/" -f1-2 | sed 's/\.\///g'
}

#
# Finds the most appropriate recipe for a given program.
#
function get_recipe() {
	pkg_dir="$1"
	pkg_name="$2"
    pkg_version="$3"

	if [ -d /Files/Compile/LocalRecipes/$pkg_name ]; then
		pkg_dir=/Files/Compile/LocalRecipes/$pkg_name
	elif [ -d /Files/Compile/Recipes/$pkg_name ]; then
		pkg_dir=/Files/Compile/Recipes/$pkg_name
	else
		pkg_dir=$shipped_dir/$pkg_name
	fi
	
	if [ ! -d "$pkg_dir" ]
	then
		recipe_url=`FindPackage --types=recipe $pkg_name`
		[ -z "$recipe_url" ] && return
		Compile --no-build --no-web "$recipe_url" || return

		pkg_dir=/Files/Compile/Recipes/$pkg_name
		[ ! -d "$pkg_dir" ] && return
	fi
	
    len="$(( ${#pkg_dir} + 2 ))"
    if [ "$pkg_version" = "" ]
    then
        pkg_version=`find $pkg_dir -maxdepth 2 -type d | cut -b${len}- | cut -d"/" -f1 | uniq | tail -n 1`
    fi
    recipe=$pkg_dir/$pkg_version

	echo "$recipe"
}

function cvs_checkout() {
	cvs -z3 -d:pserver:anonymous@cvs.savannah.nongnu.org:/sources/goboscripts co -d "$1" "$2"
}

function cvs_make_install() {
	module="$1"
	app_dir="$2"
	version_dir="$3"
    shift 3
	
    mkdir -p "$app_dir/$version_dir"

    [ "$cross_compiling" ] && source "$goboSettings/Compile/Cross-$arch_conf.conf"
    
	pushd "$module" >& /dev/null
    make CC=$CC "$@" || exit 1
	make CC=$CC install PREFIX="$app_dir/$version_dir" "$@" || exit 1
	cp -a * "$app_dir/$version_dir"
	popd >& /dev/null

	pushd "$app_dir" >& /dev/null
	rm -f Current
	ln -s "$version_dir" Current
	popd >& /dev/null
    
    pushd "$app_dir/Current" >& /dev/null
    find . -name CVS | xargs rm -Rf 2> /dev/null
    find . -name CVS | xargs rmdir  2> /dev/null
    popd >& /dev/null
}

function DirectFB_hook() {
    [ ! "$cross_compiling" ] && return
    [ "$kernelArch" = "sh" ] && echo "CVS"
}

function Linux() {
    [ ! "$cross_compiling" ] && return
    echo "$kernelVersion"
}

function Linux_Fusion_hook() {
    # always fetch from CVS
    echo "CVS"
}

function Udev_hook() {
    [ ! "$cross_compiling" ] && return
    echo "070"
    
#    kernel_version=`echo $kernelVersion | sed 's/-.*//g'`
#    latest_kernel=`GuessLatest $kernelVersion 2.6.15`
#    [ "$kernel_version" = "$latest_kernel" ] && return

    # if kernelVersion for cross-compile is older than 2.6.15,
    # recommend usage of Udev 070 instead of the latest release.
#    [ "$latest_kernel" = "2.6.15" ] && echo "070"
}
