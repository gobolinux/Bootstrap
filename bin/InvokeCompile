#!/bin/bash

#
# InvokeCompile: parses .config and runs Compile for each pkg selected there
#
# Author: Lucas Correia Villa Real <lucasvr@gobolinux.org>
#

TOP_DIR=..

PATH=$PATH:$TOP_DIR/functions:$TOP_DIR/chroot
dot_config=$TOP_DIR/.config
subdir=$TOP_DIR/packages

# GoboLinux Scripts' functions
source GoboPath
source ScriptFunctions
Import GoboLinux

# Bootstrap's own functions
source PkgFunctions
source BlackList
source $TOP_DIR/functions/Platforms

# Cross-compiling variables
source $dot_config

function download_meta() {
    unset is_meta
    unset include
    arch=`Get_Architecture $uname_m`

    source $1/Recipe
    [ -f $1/$arch/Recipe ] && source $1/$arch/Recipe
    if [ "$is_meta" = "yes" ]
    then
        for pkgver in "${include[@]}"
        do
            ipkg="${pkgver%--*}"
            ver="${pkgver#*--}"

            # fetch the included recipes
            Log_Normal "Checking for included recipe $ipkg $ver..."
            rcp=`FindPackage -W -t recipe $ipkg $ver`
            if [ -z "$rcp" ]
            then
                rcp=`FindPackage -t recipe $ipkg $ver` || exit 1
            fi
            if echo $rcp | grep -q "^http"
            then
                Log_Normal "Getting included recipe $ipkg $ver..."
                rcp=`GetRecipe $rcp` || exit 1
            fi
            download_meta $rcp
        done
    fi
}

function chroot_compile() {
    local_recipe="$1"
    symlink_options="$2"

    # check if needs to download meta recipes
    download_meta $local_recipe
    common_options="--local-repository $cross_options"

    echo
    Log_Normal "Running 'ChrootCompile $common_options $local_recipe'"
    echo
    
    Quiet pushd "$TOP_DIR/chroot"
    
    if [ "$verbose_build" = "1" ]
    then ChrootCompile $common_options --verbose $local_recipe || exit 1
    else ChrootCompile $common_options $local_recipe || exit 1
    fi
    
    # Uncompress and symlink
    export goboCrossCompiling=yes
    package=`ls -t Clean/$recipe_arch/$pkg_name*.bz2 | head -n 1`
    tar jxf $package -C $prefix/$goboPrograms
    if [ -z "$pkg_version" ] 
    then pkg_version=`echo $package | sed -e "s,Clean/$recipe_arch/${pkg_name}--,,g" -e "s,--.*,,g"`
    fi
    pkg_version=`echo $pkg_version | sed "s,\(.*CVS\|SVN\)*-r.*,\1,g"`
    
    UpdateSettings --quick $pkg_name $pkg_version
    SymlinkProgram $symlink_options $pkg_name $pkg_version
    unset goboCrossCompiling && Parse_Conf Directories.conf
    
    Quiet popd
}

function cleanup() {
    cd "$TOP_DIR/bin"
    ./BootStrap stop
    exit 0
}

# temporary workaround; cross-compiling is not doing fine with UnionSandbox
export NO_UNIONFS=1

trap cleanup TERM INT STOP HUP EXIT

[ "$CC" = "" ] && CC=gcc
[ "$LD" = "" ] && LD=ld

verbose_build=$1
if [ "$verbose_build" = "1" ]
then Log_Terse "Verbose build enabled"
else Log_Terse "Verbose build disabled"
fi

if [ "$NATIVE_COMPILING" = "y" ]
then export arch_conf="Native"
else export arch_conf=`get_chosen_arch`
fi

# this is the same as evaluating the line 'export cross_prefix_dir=...'
`cat $goboSettings/Compile/Cross/Cross-$arch_conf.conf | grep "cross_prefix_dir=" | sed 's/\"//g'`
`cat $goboSettings/Compile/Cross/Cross-$arch_conf.conf | grep "cross_kernel_arch=" | sed 's/\"//g'`
`cat $goboSettings/Compile/Cross/Cross-$arch_conf.conf | grep "cross_kernel_version=" | sed 's/\"//g'`
`cat $goboSettings/Compile/Cross/Cross-$arch_conf.conf | grep "cross_uname_m=" | sed 's/\"//g'`

prefix=$cross_prefix_dir
cross_options="--cross-compile $arch_conf"
symlink_options="-c overwrite"

export recipe_arch=`get_recipe_arch`
export uname_m="$cross_uname_m"
export cross_compiling=yes

Quiet pushd $subdir
skip_all=0

for entry in `cat $dot_config | grep ^PKG_`
do
    pkg_dir=`package_subdir $entry`
    [ ! -d "$pkg_dir" ] && { Log_Error "$pkg_dir not found"; continue; }

    pkg_name=`basename "$pkg_dir"`
    is_in_blacklist "$pkg_name" && { Log_Error "$pkg_name is in blacklist"; continue; }
    
    # If a hook is configured for the current package, execute it
    # so that a specific version can be used. Hooks are declared
    # inside functions/PkgFunctions.
    hook_function="`echo ${pkg_name} | sed 's/+//g' | sed 's/-/_/g'`_hook"
    pkg_version=`${hook_function} 2> /dev/null`

    if [ -d "$prefix/$goboPrograms/$pkg_name" ]
    then
        if [ $skip_all = 1 ]
        then
            Log_Normal "Skipping package $pkg_name"
            continue
        fi

        Ask_Option "$pkg_name seems to be already compiled. Do you want to skip it? [Y(es)/N(o)/SA(skip all)]"
        case "$REPLY" in
            n|N)  # compile it
                  ;;
            y|Y)  # skip it
                  continue
                  ;;
            sa|SA) # skip all
                  skip_all=1
                  continue
                  ;;
            *)    Die "Invalid option"
                  ;;
        esac
    fi
 
    recipe=`FindPackage -t recipe $pkg_name $pkg_version`
    echo $recipe | grep -q "^http" && local_recipe=`GetRecipe $recipe` || local_recipe=$recipe
    [ -z "$local_recipe" ] && Die "Could not find a recipe for $pkg_name $pkg_version"

    # Create the Linux-Headers package, as it's needed by Glibc
    if [ "$pkg_name" = "Glibc" ]
    then
        headersrecipe=`GetRecipe Linux-Headers`
        chroot_compile $headersrecipe
    fi
    chroot_compile $local_recipe
done

dirname="$prefix/$goboPrograms/TinyScripts"
if [ ! -d "$dirname" -a "$TARGET_EMBEDDED" = "y" ]
then
    pkg_name=TinyScripts
    local_recipe=`GetRecipe $pkg_name`
    [ -z "$local_recipe" ] && Die "Could not find a recipe for $pkg_name"
    chroot_compile $local_recipe "--conflict overwrite"
fi

Quiet popd
