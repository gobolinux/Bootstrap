#!/bin/bash

#
# Creates a ramdisk and populates it with the contents of a given directory.
#
# Written by Lucas C. Villa Real <lucasvr@gobolinux.org>
#

[ -x CreateRamdisk ] && TOP_DIR=.. || TOP_DIR=.
source ScriptFunctions
source $TOP_DIR/.config
source $TOP_DIR/functions/Platforms

if [ "$NATIVE_COMPILATION" = "y" ]
then export arch_conf="Native"
else export arch_conf=`get_chosen_arch`
fi

source $goboSettings/Compile/Cross/Cross-$arch_conf.conf
dir_name="$cross_prefix_dir"

#
# Create a Rocket-Ridge/Joliet ISO file system
#
if [ "$1" = "iso" ]
then
    img_name="GoboLinux-$arch_conf.iso"
    Log_Normal "Creating ISO from $dir_name, output is $img_name"
    mkisofs -quiet -o "$img_name" -R -J "$dir_name" && Log_Normal "Done." || Die "Failed."
    exit 0
fi


#
# Create a ramdisk image
#
mount_point="/Mount/Loop"
loop_dev="/dev/loop6"
img_name="ramdisk_img"
img_partition_offset=0

if [ ! "$2" ]
then
    echo -e "Syntax: make ramdisk SIZE=<size in MBs>\n"
    echo -e "(your current filesystem is `du -sh $dir_name | awk {'print $1'}` in size)\n"
    exit 1
fi

img_size="`echo $2 | cut -d= -f2-`"

function remove_loop_devices() {
    #
    # Sometimes 'mount -o loop' behaves strange and doesn't call 'losetup -d'
    # at umount time. This function ensures that the loops are destroyed if
    # they're not being used.
    #
    for i in /dev/loop*
    do
        losetup -d $i 2> /dev/null
    done
}

function create_ramdisk() {
    Log_Normal "Creating the ramdisk image..."
    dd if=/dev/zero of=$img_name bs=1k count=$(( img_size * 1024 ))
}

function format_ramdisk() {
    Log_Normal "Formatting the ramdisk..."
    mkfs.ext3 -Fjm0 $img_name
}

function populate_ramdisk() {
    Log_Normal "Populating the ramdisk with contents from $dir_name..."
    
    remove_loop_devices
    losetup $loop_dev $img_name || exit 1
    mount $loop_dev $mount_point
    
    # copy the contents from the given directory to the ramdisk
    (cd $dir_name && tar cf - .) | (cd $mount_point && tar xpf -)

    umount $mount_point
    remove_loop_devices

    Log_Normal "Compressing the image file..."
    gzip -9 $img_name && Log_Normal "Image successfully created at $img_name.gz"
}

# just ensure that our mount point exists
mkdir -p $mount_point

create_ramdisk
format_ramdisk
populate_ramdisk

Log_Normal "Done."
