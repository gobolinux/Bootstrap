#!/bin/bash

export TOPDIR="$PWD/.."

source GoboPath
source ScriptFunctions
source $TOPDIR/.config
source $TOPDIR/functions/Platforms

if [ "$NATIVE_COMPILATION" = "y" ]
then export arch_conf="Native"
else export arch_conf=`get_chosen_arch`
fi

source $goboSettings/Compile/Cross/Cross-$arch_conf.conf
prefix="$cross_prefix_dir"


# exported so that they can be used by per-package Shrink scripts
[ -z "$STRIP" ] && export STRIP="strip"

unset STRIP_OPT
if [ "$SHRINK_STRIP_ALL" ]
then export STRIP_OPT="--strip-all"
fi
if [ "$SHRINK_STRIP_UNNEEDED" ]
then export STRIP_OPT="--strip-unneeded"
fi


#
# Creates a backup of the working tree before cleaning it up
#
backup_dir=`basename $prefix`
backup_file="${backup_dir}-Backup-Full.tar.gz"
root_dir=`readlink -f $prefix/..`

do_backup=yes
find_has_newer_param=yes
if ! find --help | grep -q newer
then
    Log_Terse "Your 'find' utility is pretty ancient. Please consider upgrading its package."
    unset find_has_newer_param
fi

if [ -f $root_dir/$backup_file -a "$find_has_newer_param" ]
then
    Log_Normal "Checking for updates in the bootstrapped tree..."
    newer=`find $prefix -newer $root_dir/$backup_file | wc -l`
    if [ $newer = 1 ]
    then
        Log_Normal "A recent backup has been found at $root_dir/$backup_file, will not create another"
        unset do_backup
    fi
elif [ -f $root_dir/$backup_file ]
then
    Ask "Do you want to overwrite the backup of your bootstrapped tree?" || unset do_backup
fi

if [ "$do_backup" ]
then
    Log_Normal "Making a backup of the bootstrapped tree..."
    pushd $root_dir > /dev/null
    tar czpf $backup_file $backup_dir || exit 1
    popd > /dev/null
    Log_Normal "Backup created and stored at $root_dir/$backup_file"
fi


#
# Performs cleanup on individual packages
#
for i in $prefix/$goboPrograms/*
do
    package=`basename $i`
    [ ! -d "$i" ] && continue
    
    [ ! "$SHRINK_ALL" ] && Log_Terse "Shrinking package $package"
    pushd $i/Current > /dev/null || exit 1
    
    if [ "$SHRINK_ALL" ]
    then
        Log_Normal "Shrinking package $package at the extreme..."
        [ -f $TOPDIR/packages/$package/Shrink ] && $TOPDIR/packages/$package/Shrink
    fi

    if [ "$SHRINK_HEADERS" = "y" ]
    then
        [ ! "$SHRINK_ALL" ] && Log_Normal "Removing headers..."
        find include -type f -name "*.h" 2> /dev/null | xargs rm -f 2> /dev/null
        find include -type d 2> /dev/null | xargs rmdir 2> /dev/null
        rmdir include 2> /dev/null
    fi

    if [ "$SHRINK_STATIC_LIBS" ]
    then
        [ ! "$SHRINK_ALL" ] && Log_Normal "Removing static libraries..."
        find lib -type f -name "*.a" 2> /dev/null | xargs rm -f 2> /dev/null
        find lib -type d 2> /dev/null | xargs rmdir 2> /dev/null
        rmdir lib 2> /dev/null
    fi

    if [ "$SHRINK_LIBTOOL" ]
    then
        [ ! "$SHRINK_ALL" ] && Log_Normal "Removing libtool related files..."
        find lib -type f -name "*.la" 2> /dev/null | xargs rm -f 2> /dev/null
        find lib -type d 2> /dev/null | xargs rmdir 2> /dev/null
        rmdir lib 2> /dev/null
    fi

    if [ "$SHRINK_PKGCONFIG" ]
    then
        [ ! "$SHRINK_ALL" ] && Log_Normal "Removing pkgconfig related files..."
        rm -Rf lib/pkgconfig 2> /dev/null
        rmdir lib 2> /dev/null
    fi

    if [ "$SHRINK_DOCS" ]
    then
        [ ! "$SHRINK_ALL" ] && Log_Normal "Removing documentation..."
        rm -Rf Shared/doc doc Shared/man man Shared/info info Shared/gtk-doc 2> /dev/null
        rmdir Shared 2> /dev/null
    fi

    if [ "$SHRINK_LOCALES" ]
    then
        [ ! "$SHRINK_ALL" ] && Log_Normal "Removing internationalization data..."
        rm -Rf Shared/locale lib/locale lib/X11/locale 2> /dev/null
        rmdir Shared 2> /dev/null
        rmdir lib    2> /dev/null
    fi

    if [ "$SHRINK_M4_MACROS" ]
    then
        [ ! "$SHRINK_ALL" ] && Log_Normal "Removing aclocal macros..."
        rm -Rf Shared/aclocal lib/aclocal 2> /dev/null
        rmdir Shared 2> /dev/null
        rmdir lib    2> /dev/null
    fi
    
    if [ "$SHRINK_DEFAULT_SETTINGS" ]
    then
        Log_Normal "Removing backup of the default settings..."
    fi
    
    if [ "$STRIP_OPT" ]
    then
        [ ! "$SHRINK_ALL" ] && Log_Normal "Stripping executables and libraries..."
        $STRIP $STRIP_OPT bin/* sbin/* lib/* 2> /dev/null
    fi

    [ ! "$SHRINK_ALL" ] && Log_Normal "Removing empty directories..."
    find . -type d | sort -r | xargs rmdir 2> /dev/null
    
    [ ! "$SHRINK_ALL" ] && Log_Normal "Removing broken links..."
    find . | RemoveBroken >& /dev/null

    popd > /dev/null
    
    #
    # The package is possibly empty now. Remove it if that's true.
    #
    has_files=`find $i/Current/ -type f | grep -v /Resources/`
    if [ ! "$has_files" ]
    then
        Log_Terse "Removing empty package $i"
        rm -rf $i
    fi

    Log_Terse "Done."
done


#
# Performs cleanup on installed fonts
#
function remove_fonts() {
    pushd $prefix/Files/Fonts > /dev/null
    for i in `find . -name "*.dir"`
    do
        pushd `dirname $i` > /dev/null
        for i in "$@"
        do
            rm -f $i
        done
        popd > /dev/null
    done
    popd > /dev/null
}

if [ ! "$NLS_ISO8859_1" ]
then
    Log_Normal "Removing ISO8859-1 fonts..."
    remove_fonts "*8859-1.*"
fi

if [ ! "$NLS_ISO8859_2" ]
then
    Log_Normal "Removing ISO8859-2 fonts..."
    remove_fonts "*8859-2.*"
fi

if [ ! "$NLS_ISO8859_3" ]
then
    Log_Normal "Removing ISO8859-3 fonts..."
    remove_fonts "*8859-3.*"
fi

if [ ! "$NLS_ISO8859_4" ]
then
    Log_Normal "Removing ISO8859-4 fonts..."
    remove_fonts "*8859-4.*"
fi

if [ ! "$NLS_ISO8859_5" ]
then
    Log_Normal "Removing ISO8859-5 fonts..."
    remove_fonts "*8859-5.*"
fi

if [ ! "$NLS_ISO8859_6" ]
then
    Log_Normal "Removing ISO8859-6 fonts..."
    remove_fonts "*8859-6.*"
fi

if [ ! "$NLS_ISO8859_7" ]
then
    Log_Normal "Removing ISO8859-7 fonts..."
    remove_fonts "*8859-7.*"
fi

if [ ! "$NLS_ISO8859_9" ]
then
    Log_Normal "Removing ISO8859-9 fonts..."
    remove_fonts "*8859-9.*"
fi

if [ ! "$NLS_ISO8859_10" ]
then
    Log_Normal "Removing ISO8859-10 fonts..."
    remove_fonts "*8859-10.*"
fi

if [ ! "$NLS_ISO8859_11" ]
then
    Log_Normal "Removing ISO8859-11 fonts..."
    remove_fonts "*8859-11.*"
fi

if [ ! "$NLS_ISO8859_12" ]
then
    Log_Normal "Removing ISO8859-12 fonts..."
    remove_fonts "*8859-12.*"
fi

if [ ! "$NLS_ISO8859_13" ]
then
    Log_Normal "Removing ISO8859-13 fonts..."
    remove_fonts "*8859-13.*"
fi

if [ ! "$NLS_ISO8859_14" ]
then
    Log_Normal "Removing ISO8859-14 fonts..."
    remove_fonts "*8859-14.*"
fi

if [ ! "$NLS_ISO8859_15" ]
then
    Log_Normal "Removing ISO8859-15 fonts..."
    remove_fonts "*8859-15.*"
fi

if [ ! "$NLS_ISO8859_16" ]
then
    Log_Normal "Removing ISO8859-16 fonts..."
    remove_fonts "*8859-16.*"
fi

if [ ! "$NLS_KOI8_R" ]
then
    Log_Normal "Removing KOI8-R fonts..."
    remove_fonts "*KOI8*" "koi*"
fi

if [ ! "$NLS_JISX0201" ]
then
    Log_Normal "Removing JISX0201 fonts..."
    remove_fonts "jisx*" "*JISX*"
fi


#
# Remove broken links
#
Log_Normal "Removing broken links..."
find $prefix/$goboLinks $prefix/$goboSettings | RemoveBroken >& /dev/null
