#!/bin/sh

TOP_DIR=..
export PATH=$PATH:$TOP_DIR/functions

source PkgFunctions
source ScriptFunctions
source $TOP_DIR/.config
source $TOP_DIR/functions/Platforms

#
# Fetch and install ChrootCompile in the private downloads dir
#
dirname="$TOP_DIR/downloads/ChrootCompile"
if [ ! -d "$dirname" ]
then
    Log_Normal "Fetching ChrootCompile from the CVS..."
    mkdir -p "$TOP_DIR/downloads"
    pushd "$TOP_DIR/downloads" >& /dev/null
    cvs_checkout ChrootCompile tools/ChrootCompile
    popd >& /dev/null
fi

#
# Create the chroot environment
#
dirname="$TOP_DIR/chroot/tools/ChrootCompile"
got_glibc=`ls $TOP_DIR/chroot/BaseDependencies/Glibc--* 2> /dev/null`
if [ ! -d "$dirname" -o ! "$got_glibc" ]
then
    Log_Normal "Creating the ChrootCompile environment..."
    mkdir -p "$TOP_DIR/chroot"
    pushd "$TOP_DIR/chroot" >& /dev/null
    ../downloads/ChrootCompile/SetupChrootEnv --quiet
    popd >& /dev/null

    got_glibc=`ls $TOP_DIR/chroot/BaseDependencies/Glibc--* 2> /dev/null`
    if [ ! "$got_glibc" ]
    then
        Log_Error "Could not get files from rsync"
        exit 1
    fi
fi

function check_consistency() {
    diff "$1" "$2" >& /dev/null && return

    if [ "$3" = "host" ]
    then
        cp -fv "$1" "$2"
    elif [ "$3" = "biggest" ]
    then
        # the biggest the better
        if [ `wc -l "$1" | awk {'print $1'}` -ge `wc -l "$2" | awk {'print $1'}` ]
        then cp -fv "$1" "$2"
        else cp -fv "$2" "$1"
        fi
    fi
}

#
# Check for consistency between the host's cross conf files and
# the ones fetched from the cvs by SetupChrootEnv.
#
if [ ! "$NATIVE_COMPILING" ]
then
    cvsdir=`readlink -f $TOP_DIR/chroot/tools/Compile/Resources/Defaults/Settings/Compile/Cross`
    if [ ! -d "$cvsdir" ]
    then
        Log_Error "Error on SetupChrootEnv: $cvsdir not found."
        exit 1
    fi

    hostdir=$goboSettings/Compile/Cross
    if [ ! -d "$hostdir" ]
    then
        Log_Error "$hostdir not found. Please update your Compile/Scripts packages."
        exit 1
    fi

    # get the cross_cache_file variable
    target_arch=`get_chosen_arch`
    `cat $goboSettings/Compile/Cross/Cross-$target_arch.conf | grep "cross_cache_file=" | sed 's/\"//g'`
    
    # check settings for /Programs/Compile and chroot/{tools/Compile,Unpacked/i686/Compile}
    local_arch=`get_native_arch`
    unpackeddir=$(readlink -f $TOP_DIR/chroot/Unpacked/$local_arch/Compile/*/Resources/Defaults/Settings/Compile/Cross)
    for dir in "$cvsdir" "$unpackeddir"
    do
        # chroot/Unpacked may not exist yet
        [ ! -d "$dir" ] && continue
        check_consistency $hostdir/Cross-$target_arch.conf $dir/Cross-$target_arch.conf host
        check_consistency $hostdir/Cross-Common.conf     $dir/Cross-Common.conf     host
        check_consistency $hostdir/Cross-ResetEnv.conf   $dir/Cross-ResetEnv.conf   host
        check_consistency $hostdir/$cross_cache_file     $dir/$cross_cache_file     biggest
    done
fi
