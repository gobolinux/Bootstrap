#!/bin/bash

TOP_DIR=..
export PATH=$PATH:$TOP_DIR/functions

source PkgFunctions
source ScriptFunctions
source $TOP_DIR/.config
source $TOP_DIR/functions/Platforms

#
# Checks for ChrootCompile
#
dirname="$goboPrograms/ChrootCompile"
[ ! -d "$dirname" ] && Die "Please install ChrootCompile first"

#
# If performing a native compilation, compile the base dependencies
# before attempting to invoke ChrootCompile.
#
if [ "$NATIVE_COMPILATION" ]
then
    arch=`get_native_arch`
    chrootdir=$PWD/$TOP_DIR/chroot
    basedir=$chrootdir/BaseDependencies
    unpackeddir=$chrootdir/Unpacked/$arch
    mkdir -p $unpackeddir
    mkdir -p $chrootdir/BaseDependencies

    if [ ! -d "$unpackeddir/Glibc" ]
    then
        # mawk is not capable of bootstrapping Glibc
        if which awk | grep -q mawk
        then
            Die "Please install the gawk package in your running system before proceeding."
        fi
    fi

    if [ ! -d /Programs ]
    then
        # Applications will look for dependencies at compile time under /Programs.
        # So, at least while we compile the base dependencies, all the deps must be
        # there.
        Ask "Before starting the bootstrap, a directory named /Programs must be created. Ok to proceed?" || exit 1
        mkdir /Programs || Die "Cannot continue."
    fi

    function Compile_Base() {
        package="$1"

        # Compile package with standard prefixes.
        # Please note that GenBuildInformation will not work, as rootless will try
        # to process the package in $goboPrograms, which can differ from /Programs.

        # Make sure that everything is linked against our fresh packages.
        ld_library_path=$LD_LIBRARY_PATH
        for entry in /Programs/*
        do
            if [ -d "$i/Current/lib" ]
            then ld_library_path="`readlink -f $i/Current/lib`:$ld_library_path"
            fi
        done

        export goboInstall=/Programs
        export goboRuntimePicture=/Programs
        LD_LIBRARY_PATH=$ld_library_path Compile --no-sign --no-symlink --no-dependencies $package
        if [ $? != 0 ]
        then
            rm -rf $unpackeddir/$package
            Die "Cannot continue."
        fi

        # Install package inside Bootstrap's domain
        #export goboInstall=$goboPrograms
        #export goboRuntimePicture=$goboPrograms
        #Compile --no-web --no-symlink --no-sign --no-dependencies $package || { rm -rf $unpackeddir/$package; Die "Cannot continue."; }

        # Create a binary package and store it in BaseDependencies
        Quiet pushd /Programs
        version=`ls $package | grep -v "Settings\|Variable\|Current"`
        tar cjf $basedir/${package}--${version}--${arch}.tar.bz2 $package/$version
        mkdir -p $unpackeddir/$package
        cp -a $package/$version $unpackeddir/$package
        Quiet popd
    }

    # borrowed from ChrootCompile
    base_dependencies=(
        "Linux-Headers" # needed to bootstrap Glibc
        "Gawk"       # needed by Compile and to bootstrap Glibc
        "Glibc"
        "Ncurses"    # needed by Bash
        "Readline"   # needed by Bash
        "Bash"
        "CoreUtils"  # needed by Scripts (cp...)
        "Sed"        # needed by Scripts
        "PCRE"       # needed by Grep
        "Grep"       # needed by Scripts
        "Python"     # needed by Scripts
        "FindUtils"  # needed by Compile (find)
        "DB"         # needed by Perl on 013
        "Bzip2"      # needed by Atool
        "Gzip"       # needed by Atool
        "Tar"        # needed by Atool
        "Unzip"      # needed by Atool
        "Perl"       # needed by Atool
        "Atool"      # needed by Compile
        "ZLib"       # needed by File
        "File"       # needed by Scripts
        "MkTemp"     # needed by Scripts
        "Mtail"      # needed by Scripts
        "BinUtils"   # needed by GCC (as)
        "GCC"
        "Sudo"       # needed by Scripts
        "Make"       # needed by Compile
        "Patch"      # needed by Compile
        "E2FSProgs"  # needed by Util-Linux (libblkid.so)
        "Util-Linux" # needed by Compile (mount)
        "DiffUtils"  # needed by Compile (diff)
        "Texinfo"    # needed by packages that generate info pages (makeinfo)
        "Scripts"
        "Compile"
    )

    Log_Normal "Ensuring that base dependencies are already compiled"
    for package in ${base_dependencies[@]}
    do
        [ -d $unpackeddir/$package ] && Log_Normal "Cached: $(readlink -f $unpackeddir/$package)" && continue
        Compile_Base "$package"
    done
    exit 0
fi

#
# Create the chroot environment
#
got_glibc=`ls $TOP_DIR/chroot/BaseDependencies/Glibc--* 2> /dev/null`
if [ ! "$got_glibc" ]
then
    Log_Normal "Creating the ChrootCompile environment..."
    mkdir -p "$TOP_DIR/chroot"
    Quiet pushd "$TOP_DIR/chroot"
    SetupChrootEnv --quiet
    Quiet popd

    got_glibc=`ls $TOP_DIR/chroot/BaseDependencies/Glibc--* 2> /dev/null`
    [ ! "$got_glibc" ] && Die "Could not get files from rsync"
fi

function check_consistency() {
    diff "$1" "$2" >& /dev/null && return

    if [ "$3" = "host" ]
    then
        cp -fv "$1" "$2"
    elif [ "$3" = "biggest" ]
    then
        # the biggest the better
        if [ `wc -l "$1" | awk {'print $1'}` -ge `wc -l "$2" | awk {'print $1'}` ]
        then cp -fv "$1" "$2"
        else cp -fv "$2" "$1"
        fi
    fi
}

#
# Check for consistency between the host's cross conf files and
# the ones fetched by SetupChrootEnv.
#
if [ ! "$NATIVE_COMPILATION" ]
then
    hostdir=$goboSettings/Compile/Cross
    [ ! -d "$hostdir" ] && Die "$hostdir not found. Please update your Compile/Scripts packages."

    # get the cross_cache_file variable
    target_arch=`get_chosen_arch`
    `cat $goboSettings/Compile/Cross/Cross-$target_arch.conf | grep "cross_cache_file=" | sed 's/\"//g'`
    
    # check settings on /Programs/Compile and chroot/Unpacked/i686/Compile
    local_arch=`get_native_arch`
    unpackeddir="$TOP_DIR/chroot/Unpacked/$local_arch"
    if [ ! -d "$unpackeddir/Compile" ]
    then
        mkdir -p "$unpackeddir"
        Quiet pushd "$unpackeddir"
        tarball=`readlink -f ../../BaseDependencies/Compile--*.tar.bz2`
        aunpack --quiet "$tarball" || Die "Could not find Compile at $unpackeddir/../../BaseDependencies"
        Quiet popd
    fi

    rsyncdir=`readlink -f $unpackeddir/Compile/*/Resources/Defaults/Settings/Compile/Cross`
    check_consistency $hostdir/Cross-$target_arch.conf $rsyncdir/Cross-$target_arch.conf host
    check_consistency $hostdir/Cross-Common.conf       $rsyncdir/Cross-Common.conf       host
    check_consistency $hostdir/Cross-ResetEnv.conf     $rsyncdir/Cross-ResetEnv.conf     host
    check_consistency $hostdir/$cross_cache_file       $rsyncdir/$cross_cache_file       biggest
fi
