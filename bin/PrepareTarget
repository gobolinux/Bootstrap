#!/bin/sh

TOP_DIR=..
export PATH=$PATH:$TOP_DIR/functions

source PkgFunctions
source ScriptFunctions
source $TOP_DIR/.config
source $TOP_DIR/functions/Platforms

function cleanup() {
    cd "$TOP_DIR/bin"
    ./BootStrap stop
}

trap cleanup TERM INT STOP HUP


#
# Ensure that dependencies are installed
#
InstallDependencies || exit 1

if [ "$CROSS_NONE" = "y" ]
then 
	prefix="$INSTALL_PREFIX"
	kernelVersion="$KERNEL_VERSION"
else
	export arch_conf=`get_chosen_arch`
	source $goboSettings/Compile/Cross/Cross-$arch_conf.conf
	prefix="$cross_prefix_dir"
	kernelVersion="$cross_kernel_version"
	symlink_options="-c overwrite"

	# needs to be propagated to Scripts
	export goboCrossCompiling=yes
fi

#
# Create the basic GoboLinux structure
#
if [ ! -d $prefix/$goboPrograms ]
then
    Log_Normal "Creating the GoboLinux tree..."
    CreateGoboLinuxTree $prefix $SUPER_USER_NAME || exit 1
fi

#
# Since we have $goboDevices bind-mounted, unmount it and mount it afterwards
#
umount $prefix/$goboDevices 2> /dev/null

if [ ! -c $prefix/$goboDevices/console ]
then
    Log_Normal "Populating the device directory..."
    PopulateDev $prefix || exit 1
fi

mount -o bind $goboDevices $prefix/$goboDevices

#
# Install the Scripts package
#
dirname="$prefix/$goboPrograms/Scripts"
if [ ! -d "$dirname" -a "$TARGET_EMBEDDED" = "n" ]
then
	Log_Normal "Installing the Scripts package..."
	cp -a $goboPrograms/Scripts $prefix/$goboPrograms
	RescueSymlinkProgram `readlink -f $dirname/Current` $prefix/$goboLinks >& /dev/null
else
#	Log_Normal "Installing a temporary Scripts package..."
#	ln -nsf $goboPrograms/Scripts $prefix/$goboPrograms
#	RescueSymlinkProgram `readlink -f $dirname/Current` $prefix/$goboLinks >& /dev/null
	ln -nsf $goboSettings/Scripts $prefix/$goboSettings/Scripts
fi

#
# Install the Compile package
#
dirname="$prefix/$goboPrograms/Compile"
if [ ! -d "$dirname" -a "$TARGET_EMBEDDED" = "n" ]
then
	Log_Normal "Installing the Compile package..."
	cp -a $goboPrograms/Compile $prefix/$goboPrograms
	RescueSymlinkProgram `readlink -f $dirname/Current` $prefix/$goboLinks >& /dev/null
else
#	Log_Normal "Installing a temporary Compile package..."
#	ln -nsf $goboPrograms/Compile $prefix/$goboPrograms
#	RescueSymlinkProgram `readlink -f $dirname/Current` $prefix/$goboLinks >& /dev/null
	ln -nsf $goboSettings/Compile $prefix/$goboSettings/Compile
fi

#
# Install the BootScripts package
#
dirname="$prefix/$goboPrograms/BootScripts"
if [ ! -d "$dirname" -a "$TARGET_EMBEDDED" = "n" ]
then
	Log_Normal "Installing the BootScripts package..."
	cp -a $goboPrograms/BootScripts $prefix/$goboPrograms
	SymlinkProgram $symlink_options BootScripts >& /dev/null
fi

#
# Create a LibGCC package just to satisfy packages with 
# dependencies on libgcc_s.so
#
dirname="$prefix/$goboPrograms/LibGCC"
if [ "$PKG_LIBGCC" = "y" -a ! -d "$dirname" ]
then
	Log_Normal "Creating the LibGCC package..."
	if [ "$CROSS_NONE" = "y" ]
	then
		version=`gcc --version | head -n 1 | awk {'print $3'}`
		gcclibdir=$goboPrograms/GCC/Current/lib
	else
		version=`$CC --version | head -n 1 | awk {'print $3'}`
		gcclibdir=$cross_gcc_libdir
	fi
	
    mkdir -p $dirname/$version/lib
    ln -sf $version $dirname/Current

    pushd $dirname/Current/lib >& /dev/null
    cp -a $gcclibdir/libgcc* .
    for i in *
    do
        # get rid of eventual directories copied together
        [ -d $i ] && rm -Rf $i
    done
    popd >&/dev/null

    SymlinkProgram $symlink_options LibGCC >& /dev/null
fi
